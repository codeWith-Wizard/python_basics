### Loops in Python

Loops are a fundamental concept in programming that allow us to repeatedly execute a block of code multiple times. Python supports two main types of loops:

1. **`for` loop** 
2. **`while` loop**

Both types of loops enable iteration over sequences (such as lists, tuples, and strings) or repeated execution of code based on conditions.

---

### 1. **`for` Loop**

A `for` loop is used to iterate over a sequence (such as a list, tuple, string, or range) and execute a block of code for each item in the sequence.

#### Syntax:
```python
for variable in sequence:
    # Block of code
```

- **`variable`**: A placeholder for the current item in the sequence.
- **`sequence`**: Any iterable (e.g., list, string, range, etc.).

#### Example:
```python
# Iterating over a list
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)
```

**Output:**
```
apple
banana
cherry
```

#### Using `range()` with `for`:
`range()` generates a sequence of numbers, often used to control the number of iterations.

Example:
```python
for i in range(5):
    print(i)
```

**Output:**
```
0
1
2
3
4
```

---

### 2. **`while` Loop**

A `while` loop repeatedly executes a block of code as long as a specified condition is `True`. The condition is evaluated before each iteration.

#### Syntax:
```python
while condition:
    # Block of code
```

- **`condition`**: A boolean expression that is checked before each iteration. The loop runs as long as this condition is `True`.

#### Example:
```python
count = 0
while count < 5:
    print(count)
    count += 1  # Increment count to avoid infinite loop
```

**Output:**
```
0
1
2
3
4
```

---

### 3. **Control Statements in Loops**

Python provides control statements to modify the behavior of loops:

#### a. **`break` Statement**
The `break` statement is used to exit the loop immediately, regardless of the loop condition.

#### Example:
```python
for i in range(10):
    if i == 5:
        break  # Exit the loop when i equals 5
    print(i)
```

**Output:**
```
0
1
2
3
4
```

#### b. **`continue` Statement**
The `continue` statement skips the current iteration and moves to the next one, without exiting the loop.

#### Example:
```python
for i in range(5):
    if i == 2:
        continue  # Skip the current iteration when i equals 2
    print(i)
```

**Output:**
```
0
1
3
4
```

#### c. **`else` Clause in Loops**
Python allows an optional `else` clause with loops, which is executed when the loop completes all iterations without encountering a `break`.

#### Example:
```python
for i in range(5):
    print(i)
else:
    print("Loop completed")
```

**Output:**
```
0
1
2
3
4
Loop completed
```

If a `break` statement is encountered, the `else` block will not be executed.

#### Example with `break`:
```python
for i in range(5):
    if i == 3:
        break
    print(i)
else:
    print("Loop completed")
```

**Output:**
```
0
1
2
```

The `else` block is skipped since the loop was terminated by `break`.

---

### 4. **Nested Loops**

A loop inside another loop is called a **nested loop**. The inner loop is executed completely each time the outer loop runs.

#### Example:
```python
for i in range(3):
    for j in range(2):
        print(f"i = {i}, j = {j}")
```

**Output:**
```
i = 0, j = 0
i = 0, j = 1
i = 1, j = 0
i = 1, j = 1
i = 2, j = 0
i = 2, j = 1
```

---

### 5. **Infinite Loops**

A loop that never terminates is called an **infinite loop**. This usually happens when the condition of a `while` loop is always `True`, and there is no mechanism inside the loop to break it.

#### Example:
```python
while True:
    print("This is an infinite loop")
```

In practice, you should always include some condition or exit point to avoid infinite loops.

---

### Summary

- **`for` loop**: Iterates over a sequence or a range.
- **`while` loop**: Repeats as long as the condition is `True`.
- **Control statements** (`break`, `continue`, `else`): Used to modify the behavior of loops.
- **Nested loops**: One loop inside another to perform multiple levels of iteration.
- **Infinite loops**: Loops that run forever due to lack of an exit condition.

Using loops efficiently can make code more concise, reduce repetition, and handle complex iteration tasks.